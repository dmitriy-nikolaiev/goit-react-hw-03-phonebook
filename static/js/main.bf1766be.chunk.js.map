{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","state","name","number","submitHandler","e","preventDefault","props","addContactHandler","setState","changeHandler","target","value","className","onSubmit","onChange","this","type","pattern","title","required","Component","Filter","filter","filterHandler","ContactListItem","deleteHandler","onClick","ContactList","contacts","contact","toLowerCase","includes","trim","map","id","defaultProps","App","newContact","find","alert","uuidv4","event","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf1766be.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.addContactHandler({ ...this.state });\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"contact-form\" onSubmit={(e) => this.submitHandler(e)}>\r\n        <div className=\"form-container\">\r\n          <label className=\"form-label\">\r\n            Name\r\n            <input\r\n              onChange={this.changeHandler}\r\n              value={this.state.name}\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className=\"form-label\">\r\n            Number\r\n            <input\r\n              onChange={this.changeHandler}\r\n              value={this.state.number}\r\n              className=\"form-input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className=\"form-submit\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContactHandler: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Filter extends Component {\r\n  render() {\r\n    return (\r\n      <label className=\"filter-label\">\r\n        Find contacts by name:\r\n        <input\r\n          className=\"filter-input\"\r\n          name=\"name\"\r\n          value={this.props.filter}\r\n          onChange={this.props.filterHandler}\r\n        />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  filterHandler: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ContactListItem extends Component {\r\n  render() {\r\n    const { name, number, deleteHandler } = this.props;\r\n\r\n    return (\r\n      <li className=\"contact-list-item\">\r\n        <span className=\"contact-name\">{name}:</span>\r\n        <span className=\"contact-number\"> {number}</span>\r\n        <button className=\"contact-delete-btn\" onClick={deleteHandler}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteHandler: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ContactListItem } from '../ContactListItem';\r\n\r\nexport class ContactList extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"contact-list\">\r\n        {this.props.contacts\r\n          .filter((contact) =>\r\n            contact.name.toLowerCase().includes(this.props.filter.toLowerCase().trim())\r\n          )\r\n          .map((contact) => {\r\n            return (\r\n              <ContactListItem\r\n                key={contact.id}\r\n                name={contact.name}\r\n                number={contact.number}\r\n                deleteHandler={this.props.deleteHandler(contact.id)}\r\n              />\r\n            );\r\n          })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.scss';\n\nimport { ContactForm } from './components/ContactForm/';\nimport { Filter } from './components/Filter';\nimport { ContactList } from './components/ContactList/';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contacts) {\n      this.setState({ contacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContactHandler = (newContact) => {\n    if (this.state.contacts.find((contact) => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    newContact.id = uuidv4();\n    this.setState({ contacts: [...this.state.contacts, newContact] });\n  };\n\n  filterHandler = (event) => {\n    this.setState({\n      filter: event.target.value,\n    });\n  };\n\n  deleteHandler = (id) => () => {\n    this.setState({ contacts: this.state.contacts.filter((contact) => contact.id !== id) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm addContactHandler={this.addContactHandler} />\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} filterHandler={this.filterHandler} />\n        <ContactList {...this.state} deleteHandler={this.deleteHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}